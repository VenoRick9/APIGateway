services:
  postgres-user:
    image: postgres:13
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Postgres_9
      POSTGRES_DB: user_service
    ports:
      - "5430:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - app-network


  postgres-order:
    image: postgres:13
    container_name: postgres-order
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Postgres_9
      POSTGRES_DB: order_service
    ports:
      - "5428:5432"
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/user_service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Postgres_9
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      - postgres-user
      - redis
    networks:
      - app-network


  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8078:8078"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order_service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Postgres_9
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - app-network


  payment-service:
    container_name: payment-service
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    depends_on:
      - broker
      - mongodb
      - zookeeper
    ports:
      - "8077:8077"
    environment:
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: broker:9092
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: broker:9092
      SPRING_DATA_MONGO_URI: mongodb://rootuser:rootpass@mongodb:27017/payment_db?authSource=admin
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - app-network


  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "7070:7070"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - user-service
      - order-service
      - payment-service
    networks:
      - app-network


  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: rootuser
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: payment_db
    networks:
      - app-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - ./frontend/.env.docker
    depends_on:
      - api-gateway
    ports:
      - "5173:80"
    networks:
      - app-network

  keycloak_postgres:
    image: postgres:13
    container_name: keycloak_postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "5433:5432"
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak_postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_URL: http://localhost:9090
      KC_HOSTNAME_ADMIN_URL: http://localhost:9090
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "9090:8080"
    depends_on:
      - keycloak_postgres
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-order-data:
  redis-data:
  mongo-data:
  keycloak-postgres-data: